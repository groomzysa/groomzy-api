// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//**************************************************//
//********************* Enums **********************//
//**************************************************//

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum UserRole {
  ADMIN
  CLIENT
  PROVIDER
}

enum CategoryType {
  BARBER
  HAIRDRESSER
  MAKEUP_ARTIST
  NAIL_TECHNICIAN
  SPA
}

enum BookingStatus {
  ACTIVE
  CANCELLED
  DELETED
  DONE
  PENDING
}

enum DurationUnitType {
  MIN
  HRS
}

enum DayType {
  MON
  TUE
  WED
  THR
  FRI
  SAT
  SUN
}

//**************************************************//
//********************* Models *********************//
//**************************************************//

model Address {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  streetNumber String   @db.VarChar(255)
  streetName   String   @db.VarChar(255)
  town         String   @db.VarChar(255)
  city         String   @db.VarChar(255)
  province     String   @db.VarChar(255)
  areaCode     String   @db.VarChar(255)

  user       User?
  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId Int?
}

model User {
  id                     Int        @id @default(autoincrement())
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  firstName              String     @db.VarChar(255)
  lastName               String     @db.VarChar(255)
  email                  String     @db.VarChar(255)
  password               String     @db.VarChar(255)
  userImageUrl           String?    @db.VarChar(255)
  passwordResetOTP       String?    @db.VarChar(255)
  passwordResetOTPExpire DateTime?
  state                  UserStatus @default(PENDING)
  role                   UserRole

  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?     @unique

  provider Provider?

  client Client?

  @@unique([email, role])
  @@index([email, role])
}

model Provider {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tradingName String   @db.VarChar(255)
  phone       String   @db.VarChar(255)
  logoUrl     String?  @db.VarChar(255)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  addresses      Address[]
  bookings       Booking[]
  services       Service[]
  staffs         Staff[]
  operatingTimes OperatingTime[]
  socials        Social[]
  gallery        Gallery[]
}

model Service {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String           @db.VarChar(255)
  description  String           @db.Text
  duration     Float
  durationUnit DurationUnitType
  inHouse      Boolean
  price        Float
  category     CategoryType

  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId Int
  bookings   Booking[]
  staffs     Staff[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookingTime DateTime
  inHouse     Boolean       @default(false)
  status      BookingStatus

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
}

model Client {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @db.VarChar(255)

  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  bookings Booking[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)

  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId Int
  services   Service[]
}

model OperatingTime {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       DayType
  opens     String   @db.VarChar(255)
  closes    String   @db.VarChar(255)

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}

model Social {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  username  String   @db.VarChar(255)

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}

model Gallery {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @db.VarChar(255)
  galleryurl String   @db.VarChar(255)

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}
