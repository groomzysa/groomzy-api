// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//**************************************************//
//********************* Enums **********************//
//**************************************************//

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum UserRole {
  ADMIN
  CLIENT
  PROVIDER
}

enum CategoryType {
  BARBER
  HAIRDRESSER
  MAKEUP_ARTIST
  NAIL_TECHNICIAN
  SPA
}

enum BookingStatus {
  ACTIVE
  CANCELLED
  DELETED
  DONE
  PENDING
}

enum DurationUnitType {
  MIN
  HRS
}

enum DayType {
  MON
  TUE
  WED
  THR
  FRI
  SAT
  SUN
}

//**************************************************//
//********************* Models *********************//
//**************************************************//

model Address {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  streetNumber String
  streetName   String
  town         String
  city         String
  province     String
  areaCode     String

  user       User?
  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId Int?
}

model User {
  id                     Int        @id @default(autoincrement())
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  firstName              String
  lastName               String
  email                  String
  password               String
  userImageUrl           String?
  passwordResetOTP       String?
  passwordResetOTPExpire DateTime?
  state                  UserStatus @default(PENDING)
  role                   UserRole

  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?     @unique

  provider Provider?

  client Client?

  @@unique([email, role])
  @@index([email, role])
}

model Provider {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tradingName String?
  phone       String?
  logoUrl     String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  addresses      Address[]
  bookings       Booking[]
  services       Service[]
  staffs         Staff[]
  operatingTimes OperatingTime[]
  socials        Social[]
  gallery        Gallery[]
  comments       Comment[]
  providerLikes  ProviderLike[]
}

model Service {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String
  description  String           @db.Text
  duration     Float
  durationUnit DurationUnitType
  inHouse      Boolean
  price        Float
  category     CategoryType

  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId Int
  bookings   Booking[]
  staffs     Staff[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookingTime DateTime
  inHouse     Boolean       @default(false)
  status      BookingStatus

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
}

model Client {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String

  user        User         @relation(fields: [userId], references: [id])
  userId      Int          @unique
  bookings    Booking[]
  comments    Comment[]
  clientLikes ClientLike[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String

  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId Int
  services   Service[]
}

model OperatingTime {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       DayType
  opens     String
  closes    String

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}

model Social {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  username  String

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}

model Gallery {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  galleryImageUrl String

  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
}

model Comment {
  id            Int            @id @default(autoincrement())
  message       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      Int
  provider      Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId    Int
  parent        Comment?       @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children      Comment[]      @relation("ParentChild")
  parentId      Int?
  providerLikes ProviderLike[]
  clientLikes   ClientLike[]

  @@unique([id, clientId])
  @@unique([id, providerId])
  @@index([id, clientId])
  @@index([id, providerId])
}

model ProviderLike {
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  providerId Int
  commentId  Int

  @@id([providerId, commentId])
}

model ClientLike {
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  clientId  Int
  commentId Int

  @@id([clientId, commentId])
}
